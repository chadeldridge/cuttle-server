package components

import "strconv"

//
// Pages and page components
//
templ head(title string) {
	<head>
		<title>{ title }</title>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<link rel="shortcut icon" href="/favicon.ico"/>
		<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Two+Tone" media="all"/>
		<link rel="stylesheet" type="text/css" href="/assets/css/tailwind.min.css"/>
		<script src="/assets/js/htmx.min.js"></script>
	</head>
}

// item-center: center the content vertically
// content-center: center the content horizontally
templ Page(title string, content templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		@head(title)
		<body class="bg-primary-dark text-text-dark">
			<div id="app" class="min-h-full h-full w-full fixed top-0 left-0 flex flex-col items-center content-center">
				@content
			</div>
		</body>
	</html>
}

templ ErrorPage(statusCode int, pageMsg string, errMsg error) {
	<html>
		@head("404 - Page not found")
		<body>
			<div class="error">
				<h1>{ strconv.Itoa(statusCode) }</h1>
				<p>{ pageMsg }</p>
			</div>
		</body>
	</html>
}

//
// Scripts
//

script OnKeyFocusID(keyCode int, id string) {
	if (event.keyCode == keyCode) {
		document.getElementById(id).focus();
	}
}

//
// Inputs
//
templ InputOutlined(inputID, inputType, inputName string, attrs templ.Attributes) {
	<span class="inline-flex flex-col relative min-w-0 w-full align-top mt-6 border-0">
		<input
			id={ inputID }
			type={ inputType }
			name={ inputName }
			{ attrs... }
			class="appereance-none bg-primary-dark text-text-light placeholder:text-text-disabled shadow rounded-md border border-transparent ring-1 ring-text-light/20 py-2 px-3 block w-full focus:ring-2 focus:ring-primary-highlight focus:outline-none"
		/>
	</span>
}

//
// Buttons
//
templ ButtonSubmit(id, text, tabIndex string, attrs templ.Attributes) {
	<button
		id={ id }
		type="submit"
		class="mx-2 rounded-md cursor-pointer bg-secondary-base text-text-highlight uppercase px-3 py-2 text-_5rem font-semibold leading-5 hover:bg-secondary-light/20 disabled:bg-primary-light disabled:text-text-disabled"
		tabindex={ tabIndex }
		{ attrs... }
	>{ text }</button>
}

templ ButtonOutlined(id, text, tabIndex string, attrs templ.Attributes) {
	<button
		id={ id }
		type="button"
		class="mx-2 rounded-md cursor-pointer bg-inherit text-primary-highlight border-primary-highlight border uppercase px-3 py-2 text-_5rem font-semibold leading-5 hover:bg-primary-light hover:text-text-light hover:border-text-light"
		tabindex={ tabIndex }
		{ attrs... }
	>{ text }</button>
}

templ ButtonText(id, text, tabIndex string, attrs templ.Attributes) {
	<button
		id={ id }
		type="button"
		class="bottom-0 right-0 mx-2 cursor-pointer bg-inherit text-secondary-base px-3 py-2 text-sm font-semibold hover:text-secondary-light"
		tabindex={ tabIndex }
		{ attrs... }
	>{ text }</button>
}

//
// Displays
func Hide(hide bool) string {
	if hide {
		return "display-hidden "
	}
	return "display-block "
}

templ DisplayError(err string, hide bool) {
	<div
		id="errors"
		class={ Hide(hide) + "content-center mt-6 bg-primary-light/20 text-text-dark rounded-md border border-transparent ring-1 ring-text-dark/20 py-2 px-3 block w-full focus:ring-2 focus:ring-primary-highlight" }
	>{ err }</div>
}

//
// Cards
//

func getSuffix(idSuffix string) string {
	if idSuffix != "" && idSuffix[0] != '-' {
		return "-" + idSuffix
	}
	return idSuffix
}

templ Card(idSuffix string, cardHeader, cardContent, cardFooter templ.Component) {
	<div id={ "card" + getSuffix(idSuffix) } class="place-content-center bg-primary-base/65 px-10 py-5 shrink-0 max-w-sm mx-auto rounded shadow-xl shadow-black/10 ring-1 ring-black/10">
		if cardHeader != nil {
			@cardHeader
		}
		if cardContent != nil {
			@cardContent
		}
		if cardFooter != nil {
			@cardFooter
		}
	</div>
}

templ CardImage(imageURL, imageAlt string) {
	<div class="card-image">
		<img src={ imageURL } alt={ imageAlt }/>
	</div>
}

templ CardTitle(title string) {
	<div class="mx-auto mt-6 px-6 lg:px-8">
		<h2 class="text-center text-2xl font-bold tracking-tight text-text-light sm:text-4xl">{ title }</h2>
	</div>
}

templ CardContent(content templ.Component) {
	<div class="block p-2">
		@content
	</div>
}

templ CardActions(actions ...templ.Component) {
	<div class="flex mt-2 p-2 place-content-center">
		for _, action := range actions {
			@action
		}
	</div>
}
